name: workflow
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
permissions:
  id-token: write
  contents: read
jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Lint code
        run: echo "Linting repository"
      - name: Run unit tests
        run: echo "Running unit tests"

  build:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

  Continuous-Deployment:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Sync GitHub code to EC2
        run: |
          # Create app directory if it doesn't exist
          mkdir -p /home/ubuntu/app
          
          # Copy new code to app directory
          cp -r ./* /home/ubuntu/app/
          
          # Set proper permissions
          sudo chown -R ubuntu:ubuntu /home/ubuntu/app
          sudo chmod -R 755 /home/ubuntu/app
      
      - name: Build and Run Docker Container
        run: |
          # Navigate to app directory
          cd /home/ubuntu/app
          
          # Build the Docker image using the latest code
          docker build -t codeswitch_brd:latest .
          
          # Stop and remove existing container if running
          docker ps -q --filter "name=mltest" | grep -q . && docker stop mltest && docker rm -fv mltest || true
          
          # Run new container
          docker run -d -p 8501:8501 --ipc="host" --name=mltest \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            myapp:latest
      
      - name: Clean previous images and containers
        run: |
          docker system prune -f
